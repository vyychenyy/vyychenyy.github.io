## 1、简答题
- 用例的概念
用例就是一组相关的成功和失败场景集合，用来描述参与者如何使用系统来实现其目标。

- 用例和场景的关系？什么是主场景或 happy path？
场景是用例的组成成分。
主场景对应着系统最主要的对话，通常都是这个系统的成功的场景，它是最常用的，能够直接实现用户目标的场景。
- 用例有哪些形式？
摘要 —— 简洁的一段式概要，通常用于主成功场景。
非正式形式 —— 非正式的段落格式。用几个段落覆盖不同场景。
详述 —— 详细编写所有步骤及各种变化，同时具有补充部分，如前置条件和成功保证。

- 对于复杂业务，为什么编制完整用例非常难？
因为复杂业务的很多场景很复杂，包括成功场景和失败场景，而完整用例难以将所有的步骤和变化都写得很详细。

- 什么是用例图？
用例图是一种优秀的系统语境图；也就是说，用例图能够展示系统边界、位于边界之外的事物以及系统如何被使用。用例图可以作为沟通的工具，用以概括系统及其参与者的行为。

- 用例图的基本符号与元素？
    - 系统：包含外部可见的功能。
![](system.png)
    - 参与者：表示的是一个系统用户，也就是与应用程序进行交互的用户、组织或者外部系统。
    ![](https://github.com/vyychenyy/vyychenyy.github.io/blob/master/_posts/image-20190523231020455.png)
    - 用例：表示的是对系统提供的功能、服务的一种描述。
    ![](https://github.com/vyychenyy/vyychenyy.github.io/blob/master/_posts/usecase.png)
    - 用例之间的关系：
        - 包含关系：表示用例可以简单地包含其他用例所具有的行为，并把它所包含的用例行为作为自身行为的一部分。
            ![](https://github.com/vyychenyy/vyychenyy.github.io/blob/master/_posts/include.png)
        - 泛化关系：指的是一个父用例可以被特化形成多个子用例，而父用例和子用例之间的关系就是泛化关系。
            ![](https://github.com/vyychenyy/vyychenyy.github.io/blob/master/_posts/generalization.png)
        - 关联关系：表示的是参与者与用例之间的关系。在UML中常用一条直线，或者是一条带箭头的线条来表示，箭头指向信息接收方。
            ![](https://github.com/vyychenyy/vyychenyy.github.io/blob/master/_posts/association.png)
        - 扩展关系：表示在一定条件下，把新的行为加入到已有的用例中，获得的新用例叫做扩展用例，原有的用例叫做基础用例，相当于为基础用例提供一个附加功能。
            ![](https://github.com/vyychenyy/vyychenyy.github.io/blob/master/_posts/extend.png)


- 用例图的画法与步骤
1. 识别系统的Actors（用户角色）；
2. 对于每个类别的用户，标识与系统相关的用户所扮演的所有角色；
3. 确定为实现这些目标而要执行系统所需的用户；
4. 为每个目标创建用例；
5. 构造用例；
6. 确定用户的优先级，审核，评估和验证。

+ 用例图给利益相关人与开发者的价值有哪些？
明确系统的业务范围、服务对象（角色）、外部系统与设备。
用例图使得开发者能够更明确地获得需求，更好地理解需求。
用例图可以指导开发和测试，同时可以在整个过程中对其他工作流起到指导作用。


## 2、建模练习题（用例模型）
选择2-3个你熟悉的类似业务的在线服务系统（或移动 APP），如定旅馆（携程、去哪儿等）、定电影票、背单词APP等，分别绘制它们用例图。并满足以下要求：
请使用用户的视角，描述用户目标或系统提供的服务
粒度达到子用例级别，并用 include 和 exclude 关联它们
请用色彩标注出你认为创新（区别于竞争对手的）用例或子用例
尽可能识别外部系统和服务
 ![](https://github.com/vyychenyy/vyychenyy.github.io/blob/master/_posts/new.png)
 ![](https://github.com/vyychenyy/vyychenyy.github.io/blob/master/_posts/new2.png)


然后，回答下列问题：

- 为什么相似系统的用例图是相似的？
因为相似的系统他们的业务和所实现的功能都是类似的。

- 如果是定旅馆业务，请对比 Asg_RH 用例图，简述如何利用不同时代、不同地区产品的用例图，展现、突出创新业务和技术。
对比Asg_RH和携程的订旅馆业务，可以发现现在的产品会使用大量的智能算法进行推荐和排序，给用户提供更个性化的体验，让用户更方便快捷的找到自己想要的结果。
- 如何利用用例图定位创新思路（业务创新、或技术创新、或商业模式创新）在系统中的作用。
 用不同颜色的图例来突出创新点。

- 请使用 SCRUM 方法，选择一个用例图，编制某定旅馆开发的需求（backlog）开发计划表

|ID|Name|Imp | Est | How to demo |
 - | - | - | - | -
| 1 | find hotel | 10 | 5 | 根据酒店名、地点查找酒店 |
| 2 | make reservation | 20 | 5 | 选择酒店、时间、房间并确认 |
| 3 | login | 20 | 2 | 支持手机号登陆、以及微信登陆等第三方绑定登陆 |
| 4 | cancel reservation | 10 | 2 | 取消订单 |
| 5 | pay | 10 | 3 | 支持支付宝、微信等多种支付方式 |



+ 根据任务4，参考 使用用例点估算软件成本，给出项目用例点的估算

| 用例 | 业务 | 计算 | 原因 | UC比重 |
- |- | -| - | -
| find hotel | 4 | 4 | | 一般 |
| make reservation | 4 | 4 | | 一般 |
| login | 2 | 1 | | 简单 |
| cancel reservation | 1 | 1 | | 简单 |
| pay | 3 | 1 | | 简单 |


